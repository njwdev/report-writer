import React, { Component } from 'react';
// Internal
import { withAuthorization } from '../Session';
import PageContainer from '../layout/Container/PageContainer';
import PageHeader from '../layout/Container/PageHeader';
import Form from './Form';
import Instructions from '../layout/Container/Instructions';

const condition = authUser => !!authUser;

const INITIAL_STATE = {
  loading: false,
  comments: [],
  searchValue: ''
};

// Shuffle function - Fisher-Yates shuffle
function shuffle(array) {
  /* -disable no-param-reassign */
  let currentIndex = array.length;
  let tempValue;
  let randomIndex;
  // While there remain elements to shuffle…
  while (currentIndex) {
    // Pick a remaining element…

    randomIndex = Math.floor(Math.random() * currentIndex--);
    // And swap it with the current element.
    tempValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = tempValue;
  }
  return array;
}

class Home extends Component {
  state = { ...INITIAL_STATE };

  componentDidMount() {
    const { firebase } = this.props;
    this.setState({ loading: true });
    this.commentList = firebase
      .comments()
      .orderBy('created')
      .onSnapshot(snapshot => {
        const comments = [];
        snapshot.forEach(doc => comments.push({ ...doc.data(), uid: doc.id }));
        this.setState({
          // Start with random order of comments
          comments: shuffle(comments),
          loading: false
        });
      });
  }

  onShuffle = () => {
    const { comments } = this.state;
    this.setState({ comments: shuffle(comments) });
  };

  onSearchChange = e => {
    e.preventDefault();
    this.setState({ searchValue: e.target.value });
  };
  render() {
    const { comments, searchValue } = this.state;
    const { termType } = this.props;

    // 1. Make sure that comments with a different term type are filtered out
    const filteredComments = comments.filter(
      comment =>
        comment.term === termType || comment.term === 'any' || !comment.term
    );
    // 2. Add the function for searching for specific words/characters
    const commentsToDisplay = filteredComments.filter(c =>
      c.comment.includes(searchValue)
    );
    // 3. Filter the comments by type.
    const introComments = commentsToDisplay.filter(
      comment => comment.type === 'intro'
    );
    const positiveComments = commentsToDisplay.filter(
      comment => comment.type === 'positive'
    );
    const negativeComments = commentsToDisplay.filter(
      comment => comment.type === 'negative'
    );
    const closingComments = commentsToDisplay.filter(
      comment => comment.type === 'closing'
    );
    // 4. A function to make the lists and limit the comments shown to 5
    const data = (title, comms) => ({ title, comms });
    const listItems = [
      data('Intros', introComments.slice(0, 5)),
      data('Positives', positiveComments.slice(0, 5)),
      data('Negatives', negativeComments.slice(0, 5)),
      data('Closings', closingComments.slice(0, 5))
    ];

    // 5. Generate a random report that contains all four parts

    let autoGeneratedComment = null;

    if (introComments[0] && searchValue.length === 0) {
      autoGeneratedComment = `${introComments[0].comment} ${positiveComments[0].comment} ${negativeComments[0].comment} ${closingComments[0].comment}`;
    }

    // Instructions Data
    const instructionData = [
      {
        icon: 'face',
        text: "Add student's name & pronoun"
      },
      {
        icon: 'chat',
        text: "Build or 'Auto' generate your report"
      },
      {
        icon: 'file_copy',
        text: 'Hit copy!'
      }
    ];

    return (
      <PageContainer>
        <PageHeader title='Write your report' />
        <Instructions data={instructionData} />
        <Form
          autoGeneratedComment={autoGeneratedComment}
          listItems={listItems}
          onShuffle={this.onShuffle}
          onSearchChange={this.onSearchChange}
          searchValue={searchValue}
        />
      </PageContainer>
    );
  }
}

export default withAuthorization(condition)(Home);
